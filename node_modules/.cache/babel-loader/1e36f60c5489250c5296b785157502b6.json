{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = useFirebaseConnect;\nvar _differenceWith2 = _interopRequireDefault(require(\"lodash/differenceWith\")),\n  _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\")),\n  _react = require(\"react\"),\n  _query = require(\"./actions/query\"),\n  _utils = require(\"./utils\"),\n  _useFirebase = _interopRequireDefault(require(\"./useFirebase\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction useFirebaseConnect(queriesConfig) {\n  var firebase = (0, _useFirebase.default)(),\n    eventRef = (0, _react.useRef)(),\n    dataRef = (0, _react.useRef)(),\n    data = (0, _react.useMemo)(function () {\n      return (0, _utils.invokeArrayQuery)(queriesConfig);\n    }, [queriesConfig]);\n  (0, _react.useEffect)(function () {\n    if (null !== data && !(0, _isEqual2.default)(data, dataRef.current)) {\n      var itemsToSubscribe = (0, _differenceWith2.default)(data, dataRef.current, _isEqual2.default),\n        itemsToUnsubscribe = (0, _differenceWith2.default)(dataRef.current, data, _isEqual2.default);\n      dataRef.current = data, (0, _query.unWatchEvents)(firebase, firebase.dispatch, (0, _utils.getEventsFromInput)(itemsToUnsubscribe)), eventRef.current = (0, _utils.getEventsFromInput)(data), (0, _query.watchEvents)(firebase, firebase.dispatch, (0, _utils.getEventsFromInput)(itemsToSubscribe));\n    }\n  }, [data]), (0, _react.useEffect)(function () {\n    return function () {\n      (0, _query.unWatchEvents)(firebase, firebase.dispatch, eventRef.current);\n    };\n  }, []);\n}\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/useFirebaseConnect.js"],"names":["useFirebaseConnect","queriesConfig","firebase","eventRef","dataRef","data","current","itemsToSubscribe","itemsToUnsubscribe","dispatch"],"mappings":";;;;;;;;;;;;;;;;AA8Ce,SAASA,kBAAT,CAA4BC,aAA5B,EAA2C;EAAA,IAClDC,QAAQ,GAAG,CAAA,CAAA,EAAA,YAAA,CAAA,OAAA,EAAA,CADuC;IAElDC,QAAQ,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAFuC;IAGlDC,OAAO,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAHwC;IAKlDC,IAAI,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,OAAA,EAAQ,YAAA;MAAA,OAAM,CAAA,CAAA,EAAA,MAAA,CAAA,gBAAA,EAAiBJ,aAAjB,CAAN;IAAA,CAAR,EAA+C,CAACA,aAAD,CAA/C,CAL2C;EAOxD,CAAA,CAAA,EAAA,MAAA,CAAA,SAAA,EAAU,YAAM;IACd,IAAa,IAAT,KAAA,IAAI,IAAa,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAQI,IAAR,EAAcD,OAAO,CAACE,OAAtB,CAAtB,EAAsD;MAAA,IAC9CC,gBAAgB,GAAG,CAAA,CAAA,EAAA,gBAAA,CAAA,OAAA,EAAeF,IAAf,EAAqBD,OAAO,CAACE,OAA7B,EAAA,SAAA,CAAA,OAAA,CAD2B;QAE9CE,kBAAkB,GAAG,CAAA,CAAA,EAAA,gBAAA,CAAA,OAAA,EAAeJ,OAAO,CAACE,OAAvB,EAAgCD,IAAhC,EAAA,SAAA,CAAA,OAAA,CAFyB;MAIpDD,OAAO,CAACE,OAARF,GAAkBC,IAJkC,EAMpD,CAAA,CAAA,EAAA,MAAA,CAAA,aAAA,EACEH,QADF,EAEEA,QAAQ,CAACO,QAFX,EAGE,CAAA,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAmBD,kBAAnB,CAHF,CANoD,EAYpDL,QAAQ,CAACG,OAATH,GAAmB,CAAA,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAmBE,IAAnB,CAZiC,EAepD,CAAA,CAAA,EAAA,MAAA,CAAA,WAAA,EACEH,QADF,EAEEA,QAAQ,CAACO,QAFX,EAGE,CAAA,CAAA,EAAA,MAAA,CAAA,kBAAA,EAAmBF,gBAAnB,CAHF,CAKD;IAAA;EACF,CAtBD,EAsBG,CAACF,IAAD,CAtBH,CAPwD,EAgCxD,CAAA,CAAA,EAAA,MAAA,CAAA,SAAA,EAAU,YAAM;IACd,OAAO,YAAM;MACX,CAAA,CAAA,EAAA,MAAA,CAAA,aAAA,EAAcH,QAAd,EAAwBA,QAAQ,CAACO,QAAjC,EAA2CN,QAAQ,CAACG,OAApD,CACD;IAAA,CACF;EAAA,CAJD,EAIG,EAJH,CAKD;AAAA","sourcesContent":["import { isEqual, differenceWith } from 'lodash'\nimport { useMemo, useEffect, useRef } from 'react'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, invokeArrayQuery } from './utils'\nimport useFirebase from './useFirebase'\n\n/**\n * @description Hook that automatically listens/unListens to provided firebase paths\n * using React's useEffect hook.\n * @param {Function|Array} queriesConfig - Object, string, or\n * array contains object or string for path to sync from Firebase or null if\n * hook doesn't need to sync. Can also be a function that returns an object,\n * a path string, or array of an object or a path string.\n * @see https://react-redux-firebase.com/docs/api/useFirebaseConnect.html\n * @example <caption>Ordered Data</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Todos() {\n *   // sync /todos from firebase into redux\n *   useFirebaseConnect(['todos'])\n *   // Connect to redux state using selector hook\n *   const todos = useSelector(state => state.firebase.data.todos)\n *   return (\n *     <div>\n *       {JSON.stringify(todos, null, 2)}\n *     </div>\n *   )\n * }\n * @example <caption>Data that depends on props</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Post({ postId }) {\n *   useFirebaseConnect([`posts/${postId}`]) // sync /posts/postId from firebase into redux\n *   const post = useSelector(({ firebase: { ordered: { posts } } }) => posts && posts[postId])\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n */\nexport default function useFirebaseConnect(queriesConfig) {\n  const firebase = useFirebase()\n  const eventRef = useRef()\n  const dataRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfig), [queriesConfig])\n\n  useEffect(() => {\n    if (data !== null && !isEqual(data, dataRef.current)) {\n      const itemsToSubscribe = differenceWith(data, dataRef.current, isEqual)\n      const itemsToUnsubscribe = differenceWith(dataRef.current, data, isEqual)\n\n      dataRef.current = data\n      // UnWatch all current events\n      unWatchEvents(\n        firebase,\n        firebase.dispatch,\n        getEventsFromInput(itemsToUnsubscribe)\n      )\n      // Get watch events from new data\n      eventRef.current = getEventsFromInput(data)\n\n      // Watch new events\n      watchEvents(\n        firebase,\n        firebase.dispatch,\n        getEventsFromInput(itemsToSubscribe)\n      )\n    }\n  }, [data])\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      unWatchEvents(firebase, firebase.dispatch, eventRef.current)\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"script"}