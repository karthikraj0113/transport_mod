{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.skipQuickAuth = skipQuickAuth;\nexports.logIn = logIn;\nexports.checkSession = checkSession;\nvar _quick_auth = require('../quick_auth');\nvar _index = require('../store/index');\nvar _actions = require('../core/actions');\nvar _index2 = require('../core/index');\nvar l = _interopRequireWildcard(_index2);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction skipQuickAuth(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _quick_auth.skipQuickAuth, true);\n}\nfunction logIn(id, connection, loginHint, prompt) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var connectionScopes = l.auth.connectionScopes(m);\n  var scopes = connectionScopes.get(connection.get('name'));\n  var params = {\n    connection: connection.get('name'),\n    connection_scope: scopes ? scopes.toJS() : undefined\n  };\n  if (!l.auth.redirect(m) && connection.get('strategy') === 'facebook') {\n    params.display = 'popup';\n  }\n  if (loginHint) {\n    params.login_hint = loginHint;\n  }\n  if (prompt) {\n    params.prompt = prompt;\n  }\n  if (connection.get('strategy') === 'apple') {\n    (0, _index.swap)(_index.updateEntity, 'lock', l.id(m), l.setSupressSubmitOverlay, true);\n  } else {\n    (0, _index.swap)(_index.updateEntity, 'lock', l.id(m), l.setSupressSubmitOverlay, false);\n  }\n  params.isSubmitting = false;\n  (0, _actions.logIn)(id, [], params);\n}\nfunction checkSession(id, connection, loginHint) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  if (l.auth.responseType(m).indexOf('code') >= 0) {\n    // we need to force a redirect in this case\n    // so we use login with prompt=none\n    return logIn(id, connection, loginHint, 'none');\n  } else {\n    var connectionScopes = l.auth.connectionScopes(m);\n    var scopes = connectionScopes.get(connection.get('name'));\n    var params = _extends({}, l.auth.params(m).toJS(), {\n      connection: connection.get('name')\n    });\n    (0, _actions.checkSession)(id, params);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}