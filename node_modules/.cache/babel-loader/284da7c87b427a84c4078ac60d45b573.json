{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\diskk\\\\OneDrive\\\\Desktop\\\\New folder\\\\Transport_modal\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\nvar _slicedToArray = require(\"C:\\\\Users\\\\diskk\\\\OneDrive\\\\Desktop\\\\New folder\\\\Transport_modal\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ascendingDefined = ascendingDefined;\nexports.compareDefined = compareDefined;\nexports.default = sort;\nvar _ascending = _interopRequireDefault(require(\"./ascending.js\"));\nvar _permute = _interopRequireDefault(require(\"./permute.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction sort(values) {\n  for (var _len = arguments.length, F = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    F[_key - 1] = arguments[_key];\n  }\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  var _F = F,\n    _F2 = _slicedToArray(_F, 1),\n    f = _F2[0];\n  if (f && f.length !== 2 || F.length > 1) {\n    var index = Uint32Array.from(values, function (d, i) {\n      return i;\n    });\n    if (F.length > 1) {\n      F = F.map(function (f) {\n        return values.map(f);\n      });\n      index.sort(function (i, j) {\n        var _iterator = _createForOfIteratorHelper(F),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _f = _step.value;\n            var c = ascendingDefined(_f[i], _f[j]);\n            if (c) return c;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort(function (i, j) {\n        return ascendingDefined(f[i], f[j]);\n      });\n    }\n    return (0, _permute.default)(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\nfunction compareDefined() {\n  var compare = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _ascending.default;\n  if (compare === _ascending.default) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return function (a, b) {\n    var x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\nfunction ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}","map":null,"metadata":{},"sourceType":"script"}