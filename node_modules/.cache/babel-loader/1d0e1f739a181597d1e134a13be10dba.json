{"ast":null,"code":"\"use strict\";\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { GridLayer as LeafletGridLayer } from 'leaflet';\nimport MapLayer from './MapLayer';\nvar GridLayer = /*#__PURE__*/function (_MapLayer) {\n  _inheritsLoose(GridLayer, _MapLayer);\n  function GridLayer() {\n    return _MapLayer.apply(this, arguments) || this;\n  }\n  var _proto = GridLayer.prototype;\n  _proto.createLeafletElement = function createLeafletElement(props) {\n    return new LeafletGridLayer(this.getOptions(props));\n  };\n  _proto.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    var opacity = toProps.opacity,\n      zIndex = toProps.zIndex;\n    if (opacity !== fromProps.opacity) {\n      this.leafletElement.setOpacity(opacity);\n    }\n    if (zIndex !== fromProps.zIndex) {\n      this.leafletElement.setZIndex(zIndex);\n    }\n  };\n  _proto.getOptions = function getOptions(props) {\n    var options = _extends({}, _MapLayer.prototype.getOptions.call(this, props));\n    var map = props.leaflet.map;\n    if (map != null) {\n      // $FlowFixMe: Object spread\n      if (options.maxZoom == null && map.options.maxZoom != null) {\n        // $FlowFixMe: Object spread\n        options.maxZoom = map.options.maxZoom;\n      } // $FlowFixMe: Object spread\n\n      if (options.minZoom == null && map.options.minZoom != null) {\n        // $FlowFixMe: Object spread\n        options.minZoom = map.options.minZoom;\n      }\n    }\n    return options;\n  };\n  _proto.render = function render() {\n    return null;\n  };\n  return GridLayer;\n}(MapLayer);\nexport { GridLayer as default };","map":null,"metadata":{},"sourceType":"module"}