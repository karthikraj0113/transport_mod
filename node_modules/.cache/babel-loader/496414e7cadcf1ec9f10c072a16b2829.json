{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Tooltip as LeafletTooltip } from 'leaflet';\nimport { withLeaflet } from './context';\nimport DivOverlay from './DivOverlay';\nvar Tooltip = /*#__PURE__*/function (_DivOverlay) {\n  _inheritsLoose(Tooltip, _DivOverlay);\n  function Tooltip() {\n    var _this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _DivOverlay.call.apply(_DivOverlay, [this].concat(args)) || this;\n    _defineProperty(_assertThisInitialized(_this), \"onTooltipOpen\", function (_ref) {\n      var tooltip = _ref.tooltip;\n      if (tooltip === _this.leafletElement) {\n        _this.onOpen();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTooltipClose\", function (_ref2) {\n      var tooltip = _ref2.tooltip;\n      if (tooltip === _this.leafletElement) {\n        _this.onClose();\n      }\n    });\n    return _this;\n  }\n  var _proto = Tooltip.prototype;\n  _proto.createLeafletElement = function createLeafletElement(props) {\n    return new LeafletTooltip(this.getOptions(props), props.leaflet.popupContainer);\n  };\n  _proto.componentDidMount = function componentDidMount() {\n    var popupContainer = this.props.leaflet.popupContainer;\n    if (popupContainer == null) return;\n    popupContainer.on({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose\n    });\n    popupContainer.bindTooltip(this.leafletElement);\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    var popupContainer = this.props.leaflet.popupContainer;\n    if (popupContainer == null) return;\n    popupContainer.off({\n      tooltipopen: this.onTooltipOpen,\n      tooltipclose: this.onTooltipClose\n    });\n    if (popupContainer._map != null) {\n      popupContainer.unbindTooltip(this.leafletElement);\n    }\n  };\n  return Tooltip;\n}(DivOverlay);\n_defineProperty(Tooltip, \"defaultProps\", {\n  pane: 'tooltipPane'\n});\nexport default withLeaflet(Tooltip);","map":null,"metadata":{},"sourceType":"module"}