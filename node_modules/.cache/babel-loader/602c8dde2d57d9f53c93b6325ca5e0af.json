{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.showMissingCaptcha = showMissingCaptcha;\nexports.setCaptchaParams = setCaptchaParams;\nexports.swapCaptcha = swapCaptcha;\nvar _index = require('../core/index');\nvar l = _interopRequireWildcard(_index);\nvar _index2 = require('../field/index');\nvar c = _interopRequireWildcard(_index2);\nvar _i18n = require('../i18n');\nvar i18n = _interopRequireWildcard(_i18n);\nvar _index3 = require('../store/index');\nvar _web_api = require('../core/web_api');\nvar _web_api2 = _interopRequireDefault(_web_api);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n/**\n * Display the error message of missing captcha in the header of lock.\n *\n * @param {Object} m model\n * @param {Number} id\n * @param {Boolean} isPasswordless Whether the captcha is being rendered in a passwordless flow\n */\nfunction showMissingCaptcha(m, id) {\n  var isPasswordless = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var captchaConfig = isPasswordless ? l.passwordlessCaptcha(m) : l.captcha(m);\n  var captchaError = captchaConfig.get('provider') === 'recaptcha_v2' || captchaConfig.get('provider') === 'recaptcha_enterprise' ? 'invalid_recaptcha' : 'invalid_captcha';\n  var errorMessage = i18n.html(m, ['error', 'login', captchaError]);\n  (0, _index3.swap)(_index3.updateEntity, 'lock', id, function (m) {\n    m = l.setSubmitting(m, false, errorMessage);\n    return c.showInvalidField(m, 'captcha');\n  });\n  return m;\n}\n\n/**\n * Set the captcha value in the fields object before sending the request.\n *\n * @param {Object} m model\n * @param {Object} params\n * @param {Boolean} isPasswordless Whether the captcha is being rendered in a passwordless flow\n * @param {Object} fields\n *\n * @returns {Boolean} returns true if is required and missing the response from the user\n */\nfunction setCaptchaParams(m, params, isPasswordless, fields) {\n  var captchaConfig = isPasswordless ? l.passwordlessCaptcha(m) : l.captcha(m);\n  var isCaptchaRequired = captchaConfig && captchaConfig.get('required');\n  if (!isCaptchaRequired) {\n    return true;\n  }\n  var captcha = c.getFieldValue(m, 'captcha');\n  //captcha required and missing\n  if (!captcha) {\n    return false;\n  }\n  params['captcha'] = captcha;\n  fields.push('captcha');\n  return true;\n}\n\n/**\n * Get a new challenge and display the new captcha image.\n *\n * @param {number} id The id of the Lock instance.\n * @param {Boolean} isPasswordless Whether the captcha is being rendered in a passwordless flow.\n * @param {boolean} wasInvalid A boolean indicating if the previous captcha was invalid.\n * @param {Function} [next] A callback.\n */\nfunction swapCaptcha(id, isPasswordless, wasInvalid, next) {\n  if (isPasswordless) {\n    return _web_api2.default.getPasswordlessChallenge(id, function (err, newCaptcha) {\n      if (!err && newCaptcha) {\n        (0, _index3.swap)(_index3.updateEntity, 'lock', id, l.setPasswordlessCaptcha, newCaptcha, wasInvalid);\n      }\n      if (next) {\n        next();\n      }\n    });\n  }\n  return _web_api2.default.getChallenge(id, function (err, newCaptcha) {\n    if (!err && newCaptcha) {\n      (0, _index3.swap)(_index3.updateEntity, 'lock', id, l.setCaptcha, newCaptcha, wasInvalid);\n    }\n    if (next) {\n      next();\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}