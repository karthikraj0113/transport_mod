{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = useFirestoreConnect;\nvar _isEqual2 = _interopRequireDefault(require(\"lodash/isEqual\")),\n  _react = require(\"react\"),\n  _utils = require(\"./utils\"),\n  _useFirestore = _interopRequireDefault(require(\"./useFirestore\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction useFirestoreConnect(queriesConfigs) {\n  var firestore = (0, _useFirestore.default)(),\n    firestoreIsEnabled = !!firestore,\n    queryRef = (0, _react.useRef)(),\n    data = (0, _react.useMemo)(function () {\n      return (0, _utils.invokeArrayQuery)(queriesConfigs);\n    }, [queriesConfigs]);\n  (0, _react.useEffect)(function () {\n    if (firestoreIsEnabled && !(0, _isEqual2.default)(data, queryRef.current)) {\n      var changes = (0, _utils.getChanges)(data, queryRef.current);\n      queryRef.current = data, firestore.unsetListeners(changes.removed), firestore.setListeners(changes.added);\n    }\n  }, [data]), (0, _react.useEffect)(function () {\n    return function () {\n      firestoreIsEnabled && queryRef.current && firestore.unsetListeners(queryRef.current);\n    };\n  }, []);\n}\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["useFirestoreConnect","queriesConfigs","firestore","firestoreIsEnabled","queryRef","data","current","changes","unsetListeners","removed","setListeners","added"],"mappings":";;;;;;;;;;;;;;AAiDe,SAASA,mBAAT,CAA6BC,cAA7B,EAA6C;EAAA,IACpDC,SAAS,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,OAAA,EAAA,CADwC;IAEpDC,kBAAkB,GAAG,CAAC,CAACD,SAF6B;IAGpDE,QAAQ,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAHyC;IAKpDC,IAAI,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,OAAA,EAAQ,YAAA;MAAA,OAAM,CAAA,CAAA,EAAA,MAAA,CAAA,gBAAA,EAAiBJ,cAAjB,CAAN;IAAA,CAAR,EAAgD,CAACA,cAAD,CAAhD,CAL6C;EAO1D,CAAA,CAAA,EAAA,MAAA,CAAA,SAAA,EAAU,YAAM;IACd,IAAIE,kBAAkB,IAAI,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,OAAA,EAAQE,IAAR,EAAcD,QAAQ,CAACE,OAAvB,CAA3B,EAA4D;MAC1D,IAAMC,OAAO,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,UAAA,EAAWF,IAAX,EAAiBD,QAAQ,CAACE,OAA1B,CAAhB;MAEAF,QAAQ,CAACE,OAATF,GAAmBC,IAHuC,EAM1DH,SAAS,CAACM,cAAVN,CAAyBK,OAAO,CAACE,OAAjCP,CAN0D,EAS1DA,SAAS,CAACQ,YAAVR,CAAuBK,OAAO,CAACI,KAA/BT,CACD;IAAA;EACF,CAZD,EAYG,CAACG,IAAD,CAZH,CAP0D,EAsB1D,CAAA,CAAA,EAAA,MAAA,CAAA,SAAA,EAAU,YAAM;IACd,OAAO,YAAM;MACPF,kBAAkB,IAAIC,QAAQ,CAACE,OADxB,IAETJ,SAAS,CAACM,cAAVN,CAAyBE,QAAQ,CAACE,OAAlCJ,CAEH;IAAA,CACF;EAAA,CAND,EAMG,EANH,CAOD;AAAA","sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * Populate is supported for Firestore as of v0.6.0 of redux-firestore (added\n * [as part of issue #48](https://github.com/prescottprue/redux-firestore/issues/48)).\n * @param {Array|Function} queriesConfigs - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @see https://react-redux-firebase.com/docs/api/useFirestoreConnect.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodosList() {\n *   useFirestoreConnect(['todos']) // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firestore.data.todos)\n *   return (\n *     <ul>\n *       {todos &&\n *         todos.map((todo) => (\n *           <li>id: {todo.id} todo: {todo.description}</li>\n *         ))}\n *    </ul>\n *   )\n * }\n * @example <caption>Object as query</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodoItem({ todoId }) {\n *   useFirestoreConnect([{\n *     collection: 'todos',\n *     doc: todoId\n *   }])\n *   const todo = useSelector(\n *     ({ firestore: { data } }) => data.todos && data.todos[todoId]\n *   )\n *\n *   return <div>{JSON.stringify(todo)}</div>\n * }\n */\nexport default function useFirestoreConnect(queriesConfigs) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfigs), [queriesConfigs])\n\n  useEffect(() => {\n    if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n      const changes = getChanges(data, queryRef.current)\n\n      queryRef.current = data\n\n      // Remove listeners for inactive subscriptions\n      firestore.unsetListeners(changes.removed)\n\n      // Add listeners for new subscriptions\n      firestore.setListeners(changes.added)\n    }\n  }, [data])\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"script"}