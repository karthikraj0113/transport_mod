{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\diskk\\\\OneDrive\\\\Desktop\\\\New folder\\\\Transport_modal\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sequentialQuantile;\nvar _index = require(\"../../../lib-vendor/d3-array/src/index.js\");\nvar _continuous = require(\"./continuous.js\");\nvar _init = require(\"./init.js\");\nfunction sequentialQuantile() {\n  var domain = [],\n    interpolator = _continuous.identity;\n  function scale(x) {\n    if (x != null && !isNaN(x = +x)) return interpolator(((0, _index.bisect)(domain, x, 1) - 1) / (domain.length - 1));\n  }\n  scale.domain = function (_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    var _iterator = _createForOfIteratorHelper(_),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var d = _step.value;\n        if (d != null && !isNaN(d = +d)) domain.push(d);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    domain.sort(_index.ascending);\n    return scale;\n  };\n  scale.interpolator = function (_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n  scale.range = function () {\n    return domain.map(function (d, i) {\n      return interpolator(i / (domain.length - 1));\n    });\n  };\n  scale.quantiles = function (n) {\n    return Array.from({\n      length: n + 1\n    }, function (_, i) {\n      return (0, _index.quantile)(domain, i / n);\n    });\n  };\n  scale.copy = function () {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n  return _init.initInterpolator.apply(scale, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}