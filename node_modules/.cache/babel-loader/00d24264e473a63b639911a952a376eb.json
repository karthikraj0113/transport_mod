{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.requestPasswordlessEmail = requestPasswordlessEmail;\nexports.requestPasswordlessEmailSuccess = requestPasswordlessEmailSuccess;\nexports.requestPasswordlessEmailError = requestPasswordlessEmailError;\nexports.resendEmail = resendEmail;\nexports.sendSMS = sendSMS;\nexports.logIn = logIn;\nexports.restart = restart;\nexports.toggleTermsAcceptance = toggleTermsAcceptance;\nvar _index = require('../../store/index');\nvar _actions = require('../../core/actions');\nvar _web_api = require('../../core/web_api');\nvar _web_api2 = _interopRequireDefault(_web_api);\nvar _index2 = require('../../field/index');\nvar c = _interopRequireWildcard(_index2);\nvar _index3 = require('../../core/index');\nvar l = _interopRequireWildcard(_index3);\nvar _index4 = require('./index');\nvar _phone_number = require('../../field/phone_number');\nvar _i18n = require('../../i18n');\nvar i18n = _interopRequireWildcard(_i18n);\nvar _captcha = require('../captcha');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getErrorMessage(m, id, error) {\n  var key = error.error;\n  if (error.error === 'sms_provider_error' && (error.description || '').indexOf('(Code: 21211)') > -1) {\n    key = 'bad.phone_number';\n  }\n  if (error.code === 'invalid_captcha') {\n    var captchaConfig = l.passwordlessCaptcha(m);\n    key = captchaConfig.get('provider') === 'recaptcha_v2' || captchaConfig.get('provider') === 'recaptcha_enterprise' ? 'invalid_recaptcha' : 'invalid_captcha';\n  }\n  return i18n.html(m, ['error', 'passwordless', key]) || i18n.html(m, ['error', 'passwordless', 'lock.fallback']);\n}\nfunction swapCaptchaAfterError(id, error) {\n  var wasCaptchaInvalid = error && error.code === 'invalid_captcha';\n  (0, _captcha.swapCaptcha)(id, true, wasCaptchaInvalid);\n}\nfunction requestPasswordlessEmail(id) {\n  (0, _actions.validateAndSubmit)(id, ['email'], function (m) {\n    sendEmail(m, id, requestPasswordlessEmailSuccess, requestPasswordlessEmailError);\n  });\n}\nfunction requestPasswordlessEmailSuccess(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    m = l.setSubmitting(m, false);\n    return (0, _index4.setPasswordlessStarted)(m, true);\n  });\n}\nfunction requestPasswordlessEmailError(id, error) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var errorMessage = getErrorMessage(m, id, error);\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n  swapCaptchaAfterError(id, error);\n}\nfunction resendEmail(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.resend);\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  sendEmail(m, id, resendEmailSuccess, resendEmailError);\n}\nfunction resendEmailSuccess(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setResendSuccess);\n}\nfunction resendEmailError(id, error) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.setResendFailed);\n}\nfunction getPasswordlessConnectionName(m, defaultPasswordlessConnection) {\n  var connections = l.connections(m, 'passwordless', defaultPasswordlessConnection);\n  return connections.size > 0 && l.useCustomPasswordlessConnection(m) ? connections.first().get('name') : defaultPasswordlessConnection;\n}\nfunction sendEmail(m, id, successFn, errorFn) {\n  var params = {\n    connection: getPasswordlessConnectionName(m, 'email'),\n    email: c.getFieldValue(m, 'email'),\n    send: (0, _index4.send)(m)\n  };\n  if ((0, _index4.isSendLink)(m) && !l.auth.params(m).isEmpty()) {\n    params.authParams = l.auth.params(m).toJS();\n  }\n  var isCaptchaValid = (0, _captcha.setCaptchaParams)(m, params, true, []);\n  if (!isCaptchaValid) {\n    return (0, _captcha.showMissingCaptcha)(m, id, true);\n  }\n  _web_api2.default.startPasswordless(l.id(m), params, function (error) {\n    if (error) {\n      setTimeout(function () {\n        return errorFn(l.id(m), error);\n      }, 250);\n    } else {\n      successFn(l.id(m));\n    }\n  });\n}\nfunction sendSMS(id) {\n  (0, _actions.validateAndSubmit)(id, ['phoneNumber'], function (m) {\n    var params = {\n      connection: getPasswordlessConnectionName(m, 'sms'),\n      phoneNumber: (0, _phone_number.phoneNumberWithDiallingCode)(m),\n      send: (0, _index4.send)(m)\n    };\n    var isCaptchaValid = (0, _captcha.setCaptchaParams)(m, params, true, []);\n    if (!isCaptchaValid) {\n      return (0, _captcha.showMissingCaptcha)(m, id, true);\n    }\n    _web_api2.default.startPasswordless(id, params, function (error) {\n      if (error) {\n        setTimeout(function () {\n          return sendSMSError(id, error);\n        }, 250);\n      } else {\n        sendSMSSuccess(id);\n      }\n    });\n  });\n}\nfunction sendSMSSuccess(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, function (m) {\n    m = l.setSubmitting(m, false);\n    m = (0, _index4.setPasswordlessStarted)(m, true);\n    return m;\n  });\n}\nfunction sendSMSError(id, error) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var errorMessage = getErrorMessage(m, id, error);\n  l.emitAuthorizationErrorEvent(m, error);\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n  swapCaptchaAfterError(id, error);\n}\nfunction logIn(id) {\n  var m = (0, _index.read)(_index.getEntity, 'lock', id);\n  var authParams = l.auth.params(m).toJS();\n  var params = _extends({\n    verificationCode: c.getFieldValue(m, 'vcode')\n  }, authParams);\n  if ((0, _index4.isEmail)(m)) {\n    params.connection = getPasswordlessConnectionName(m, 'email');\n    params.email = c.getFieldValue(m, 'email');\n  } else {\n    params.connection = getPasswordlessConnectionName(m, 'sms');\n    params.phoneNumber = (0, _phone_number.phoneNumberWithDiallingCode)(m);\n  }\n  (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, true);\n  _web_api2.default.passwordlessVerify(id, params, function (error, result) {\n    var errorMessage = void 0;\n    if (error) {\n      var _m = (0, _index.read)(_index.getEntity, 'lock', id);\n      errorMessage = getErrorMessage(_m, id, error);\n      if (error.logToConsole) {\n        console.error(error.description);\n      }\n      l.emitAuthorizationErrorEvent(_m, error);\n      return (0, _index.swap)(_index.updateEntity, 'lock', id, l.setSubmitting, false, errorMessage);\n    } else {\n      return (0, _actions.logInSuccess)(id, result);\n    }\n  });\n}\nfunction restart(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.restartPasswordless);\n  (0, _captcha.swapCaptcha)(id, true, false);\n}\nfunction toggleTermsAcceptance(id) {\n  (0, _index.swap)(_index.updateEntity, 'lock', id, _index4.toggleTermsAcceptance);\n}","map":null,"metadata":{},"sourceType":"script"}