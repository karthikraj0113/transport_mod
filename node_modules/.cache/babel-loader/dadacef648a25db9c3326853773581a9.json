{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.getChildType = getChildType, exports.getPopulateChild = getPopulateChild, exports.getPopulateObj = getPopulateObj, exports.getPopulateObjs = getPopulateObjs, exports.getPopulates = getPopulates, exports.populateList = populateList, exports.promisesForPopulate = promisesForPopulate;\nvar _some2 = _interopRequireDefault(require(\"lodash/some\")),\n  _has2 = _interopRequireDefault(require(\"lodash/has\")),\n  _set2 = _interopRequireDefault(require(\"lodash/set\")),\n  _forEach2 = _interopRequireDefault(require(\"lodash/forEach\")),\n  _get2 = _interopRequireDefault(require(\"lodash/get\")),\n  _map2 = _interopRequireDefault(require(\"lodash/map\")),\n  _isObject2 = _interopRequireDefault(require(\"lodash/isObject\")),\n  _filter2 = _interopRequireDefault(require(\"lodash/filter\")),\n  _index = require(\"./index\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getPopulateObj(str) {\n  if (!(0, _index.isString)(str)) return str;\n  var strArray = str.split(\":\");\n  return {\n    child: strArray[0],\n    root: strArray[1]\n  };\n}\nfunction getChildType(child) {\n  return (0, _index.isString)(child) ? \"string\" : Array.isArray(child) ? \"array\" : (0, _isObject2.default)(child) ? \"object\" : \"other\";\n}\nfunction getPopulateObjs(arr) {\n  return Array.isArray(arr) ? arr.map(function (o) {\n    return (0, _isObject2.default)(o) ? o : getPopulateObj(o);\n  }) : arr;\n}\nfunction getPopulates(queryParams) {\n  var populates = (0, _filter2.default)(queryParams, function (param) {\n    return -1 !== param.indexOf(\"populate\") || (0, _isObject2.default)(param) && param.populates;\n  }).map(function (p) {\n    return p.split(\"=\")[1];\n  });\n  return populates.length ? populates.map(getPopulateObj) : null;\n}\nfunction getPopulateChild(firebase, populate, id) {\n  var childPath = populate.childParam ? \"/\".concat(populate.childParam) : \"\",\n    path = \"\".concat(populate.root, \"/\").concat(id).concat(childPath);\n  return firebase.database().ref().child(path).once(\"value\").then(function (snap) {\n    return snap.val();\n  });\n}\nfunction populateList(firebase, list, p, results) {\n  return results[p.root] || (0, _set2.default)(results, p.root, {}), Promise.all((0, _map2.default)(list, function (id, childKey) {\n    var populateKey = !0 === id || p.populateByKey ? childKey : id;\n    return getPopulateChild(firebase, p, populateKey).then(function (pc) {\n      return pc ? (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(populateKey), pc) : results;\n    });\n  }));\n}\nfunction promisesForPopulate(firebase, dataKey, originalData, populatesIn) {\n  var promisesArray = [],\n    results = {},\n    populatesForData = getPopulateObjs(\"function\" == typeof populatesIn ? populatesIn(dataKey, originalData) : populatesIn),\n    dataHasPopulateChilds = (0, _some2.default)(populatesForData, function (populate) {\n      return (0, _has2.default)(originalData, populate.child);\n    });\n  return dataHasPopulateChilds ? (0, _forEach2.default)(populatesForData, function (p) {\n    return (0, _index.isString)((0, _get2.default)(originalData, p.child)) ? promisesArray.push(getPopulateChild(firebase, p, (0, _get2.default)(originalData, p.child)).then(function (v) {\n      v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat((0, _get2.default)(originalData, p.child)), v);\n    })) : promisesArray.push(populateList(firebase, (0, _get2.default)(originalData, p.child), p, results));\n  }) : (0, _forEach2.default)(originalData, function (d, key) {\n    var populatesForDataItem = getPopulateObj(\"function\" == typeof populatesIn ? populatesIn(key, d) : populatesIn);\n    (0, _forEach2.default)(populatesForDataItem, function (p) {\n      var idOrList = (0, _get2.default)(d, p.child);\n      return idOrList ? (0, _index.isString)(idOrList) ? promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {\n        return v && (0, _set2.default)(results, \"\".concat(p.root, \".\").concat(idOrList), v), results;\n      })) : Array.isArray(idOrList) || (0, _isObject2.default)(idOrList) ? promisesArray.push(populateList(firebase, idOrList, p, results)) : void 0 : void 0;\n    });\n  }), Promise.all(promisesArray).then(function () {\n    return results;\n  });\n}","map":{"version":3,"sources":["../../src/utils/populate.js"],"names":["getPopulateObj","str","strArray","split","child","root","getChildType","Array","isArray","getPopulateObjs","arr","map","o","getPopulates","queryParams","populates","param","indexOf","p","length","getPopulateChild","firebase","populate","id","childPath","childParam","path","database","ref","once","then","snap","val","populateList","list","results","Promise","all","childKey","populateKey","populateByKey","pc","promisesForPopulate","dataKey","originalData","populatesIn","promisesArray","populatesForData","dataHasPopulateChilds","push","v","d","key","populatesForDataItem","idOrList"],"mappings":"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","sourcesContent":["import { filter, isObject, map, get, forEach, set, has, some } from 'lodash'\nimport { isString } from './index'\n\n/**\n * @private\n * @param {string|object} str - String or Object to standardize into populate object\n * @returns {object} Populate object\n */\nexport function getPopulateObj(str) {\n  if (!isString(str)) {\n    return str\n  }\n  const strArray = str.split(':')\n  // TODO: Handle childParam\n  return { child: strArray[0], root: strArray[1] }\n}\n\n/**\n * @private\n * @param {string|object} child - Value at child parameter\n * @returns {string} Type of child\n */\nexport function getChildType(child) {\n  if (isString(child)) {\n    return 'string'\n  }\n  if (Array.isArray(child)) {\n    return 'array'\n  }\n  if (isObject(child)) {\n    return 'object'\n  }\n  return 'other'\n}\n\n/**\n * @private\n * @param {string|object} arr - String or Object to standardize into populate object\n * @returns {Array} List of populate objects\n */\nexport function getPopulateObjs(arr) {\n  if (!Array.isArray(arr)) {\n    return arr\n  }\n  return arr.map((o) => (isObject(o) ? o : getPopulateObj(o)))\n}\n\n/**\n * @private\n * @param {Array} queryParams - Query parameters from which to get populates\n * @returns {Array} Array of populate settings\n */\nexport function getPopulates(queryParams) {\n  const populates = filter(\n    queryParams,\n    (param) =>\n      param.indexOf('populate') !== -1 || (isObject(param) && param.populates)\n  ).map((p) => p.split('=')[1])\n  // No populates\n  if (!populates.length) {\n    return null\n  }\n  return populates.map(getPopulateObj)\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {object} populate - Object containing root to be populate\n * @param {object} populate.root - Firebase root path from which to load populate item\n * @param {string} id - String id\n * @returns {Promise} Resolves with populate child\n */\nexport function getPopulateChild(firebase, populate, id) {\n  const childPath = populate.childParam ? `/${populate.childParam}` : ''\n  const path = `${populate.root}/${id}${childPath}`\n  return firebase\n    .database()\n    .ref()\n    .child(path)\n    .once('value')\n    .then((snap) =>\n      // Return id if population value does not exist\n      snap.val()\n    )\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {object} list - Object to have parameter populated\n * @param {object} p - Object containing populate information\n * @param {object} results - Object containing results of population from other populates\n * @returns {Promise} Resovles with populated list\n */\nexport function populateList(firebase, list, p, results) {\n  // Handle root not being defined\n  if (!results[p.root]) {\n    set(results, p.root, {})\n  }\n  return Promise.all(\n    map(list, (id, childKey) => {\n      // handle list of keys\n      const populateKey = id === true || p.populateByKey ? childKey : id\n      return getPopulateChild(firebase, p, populateKey).then((pc) => {\n        if (pc) {\n          // write child to result object under root name if it is found\n          return set(results, `${p.root}.${populateKey}`, pc)\n        }\n        return results\n      })\n    })\n  )\n}\n\n/**\n * @private\n * @param {object} firebase - Internal firebase object\n * @param {string} dataKey - Object to have parameter populated\n * @param {object} originalData - Data before population\n * @param {Function|object} populatesIn - Populate configs or function returning configs\n * @returns {Promise} Promise which resolves after populate data is loaded\n */\nexport function promisesForPopulate(\n  firebase,\n  dataKey,\n  originalData,\n  populatesIn\n) {\n  // TODO: Handle selecting of parameter to populate with (i.e. displayName of users/user)\n  const promisesArray = []\n  const results = {}\n\n  // test if data is a single object, try generating populates and looking for the child\n  const populatesForData = getPopulateObjs(\n    typeof populatesIn === 'function'\n      ? populatesIn(dataKey, originalData)\n      : populatesIn\n  )\n\n  const dataHasPopulateChilds = some(populatesForData, (populate) =>\n    has(originalData, populate.child)\n  )\n\n  if (dataHasPopulateChilds) {\n    // Data is a single object, resolve populates directly\n    forEach(populatesForData, (p) => {\n      if (isString(get(originalData, p.child))) {\n        return promisesArray.push(\n          getPopulateChild(firebase, p, get(originalData, p.child)).then(\n            (v) => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${get(originalData, p.child)}`, v)\n              }\n            }\n          )\n        )\n      }\n\n      // Single Parameter is list\n      return promisesArray.push(\n        populateList(firebase, get(originalData, p.child), p, results)\n      )\n    })\n  } else {\n    // Data is a list of objects, each value has parameters to be populated\n    // { '1': {someobject}, '2': {someobject} }\n    forEach(originalData, (d, key) => {\n      // generate populates for this data item if a fn was passed\n      const populatesForDataItem = getPopulateObj(\n        typeof populatesIn === 'function' ? populatesIn(key, d) : populatesIn\n      )\n\n      // resolve each populate for this data item\n      forEach(populatesForDataItem, (p) => {\n        // get value of parameter to be populated (key or list of keys)\n        const idOrList = get(d, p.child)\n\n        // Parameter/child of list item does not exist\n        if (!idOrList) {\n          return\n        }\n\n        // Parameter of each list item is single ID\n        if (isString(idOrList)) {\n          return promisesArray.push(\n            getPopulateChild(firebase, p, idOrList).then((v) => {\n              // write child to result object under root name if it is found\n              if (v) {\n                set(results, `${p.root}.${idOrList}`, v)\n              }\n              return results\n            })\n          )\n        }\n\n        // Parameter of each list item is a list of ids\n        if (Array.isArray(idOrList) || isObject(idOrList)) {\n          // Create single promise that includes a promise for each child\n          return promisesArray.push(\n            populateList(firebase, idOrList, p, results)\n          )\n        }\n      })\n    })\n  }\n\n  // Return original data after population promises run\n  return Promise.all(promisesArray).then(() => results)\n}\n"]},"metadata":{},"sourceType":"script"}