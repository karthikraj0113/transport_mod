{"ast":null,"code":"var baseFlatten = require('./_baseFlatten'),\n  baseIteratee = require('./_baseIteratee'),\n  baseRest = require('./_baseRest'),\n  baseUniq = require('./_baseUniq'),\n  isArrayLikeObject = require('./isArrayLikeObject'),\n  last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = baseRest(function (arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\nmodule.exports = unionBy;","map":{"version":3,"names":["baseFlatten","require","baseIteratee","baseRest","baseUniq","isArrayLikeObject","last","unionBy","arrays","iteratee","undefined","module","exports"],"sources":["C:/Users/diskk/OneDrive/Desktop/New folder/Transport_modal/node_modules/lodash/unionBy.js"],"sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\n\nmodule.exports = unionBy;\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EACvCC,YAAY,GAAGD,OAAO,CAAC,iBAAiB,CAAC;EACzCE,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;EACjCG,QAAQ,GAAGH,OAAO,CAAC,aAAa,CAAC;EACjCI,iBAAiB,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;EAClDK,IAAI,GAAGL,OAAO,CAAC,QAAQ,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,OAAO,GAAGJ,QAAQ,CAAC,UAASK,MAAM,EAAE;EACtC,IAAIC,QAAQ,GAAGH,IAAI,CAACE,MAAM,CAAC;EAC3B,IAAIH,iBAAiB,CAACI,QAAQ,CAAC,EAAE;IAC/BA,QAAQ,GAAGC,SAAS;EACtB;EACA,OAAON,QAAQ,CAACJ,WAAW,CAACQ,MAAM,EAAE,CAAC,EAAEH,iBAAiB,EAAE,IAAI,CAAC,EAAEH,YAAY,CAACO,QAAQ,EAAE,CAAC,CAAC,CAAC;AAC7F,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGL,OAAO"},"metadata":{},"sourceType":"script"}