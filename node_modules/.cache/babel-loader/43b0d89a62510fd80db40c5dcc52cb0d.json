{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _username_input = require('../../ui/input/username_input');\nvar _username_input2 = _interopRequireDefault(_username_input);\nvar _index = require('../index');\nvar c = _interopRequireWildcard(_index);\nvar _index2 = require('../../store/index');\nvar _index3 = require('../../core/index');\nvar l = _interopRequireWildcard(_index3);\nvar _username = require('../username');\nvar _avatar = require('../../avatar');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar UsernamePane = function (_React$Component) {\n  _inherits(UsernamePane, _React$Component);\n  function UsernamePane() {\n    _classCallCheck(this, UsernamePane);\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n  UsernamePane.prototype.componentDidMount = function componentDidMount(e) {\n    var _props = this.props,\n      lock = _props.lock,\n      validateFormat = _props.validateFormat,\n      usernameStyle = _props.usernameStyle,\n      strictValidation = _props.strictValidation;\n    if (l.ui.avatar(lock) && c.username(lock)) {\n      (0, _avatar.requestAvatar)(l.id(lock), c.username(lock));\n    }\n    (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _username.setUsername, c.username(lock), usernameStyle, validateFormat, strictValidation);\n  };\n  UsernamePane.prototype.handleChange = function handleChange(e) {\n    var _props2 = this.props,\n      lock = _props2.lock,\n      validateFormat = _props2.validateFormat,\n      usernameStyle = _props2.usernameStyle,\n      strictValidation = _props2.strictValidation;\n    if (l.ui.avatar(lock)) {\n      (0, _avatar.debouncedRequestAvatar)(l.id(lock), e.target.value);\n    }\n    (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _username.setUsername, e.target.value, usernameStyle, validateFormat, strictValidation);\n  };\n  UsernamePane.prototype.render = function render() {\n    var _props3 = this.props,\n      i18n = _props3.i18n,\n      lock = _props3.lock,\n      placeholder = _props3.placeholder,\n      validateFormat = _props3.validateFormat;\n    var allowAutocomplete = l.ui.allowAutocomplete(lock);\n    var value = c.getFieldValue(lock, 'username');\n    var usernameValidation = validateFormat ? (0, _username.getUsernameValidation)(lock) : {};\n\n    // TODO: invalidErrorHint and blankErrorHint are deprecated.\n    // They are kept for backwards compatibility in the code for the customers overwriting\n    // them with languageDictionary. They can be removed in the next major release.\n    var invalidHintKey = function invalidHintKey(str) {\n      if (!str) {\n        return i18n.str('blankErrorHint') ? 'blankErrorHint' : 'blankUsernameErrorHint';\n      }\n      if ((0, _username.usernameLooksLikeEmail)(str) || !validateFormat) return i18n.str('invalidErrorHint') ? 'invalidErrorHint' : 'invalidUsernameErrorHint';\n      return 'usernameFormatErrorHint';\n    };\n    var invalidHint = function invalidHint(str) {\n      var hintKey = invalidHintKey(str);\n\n      // only show format info in the error if it should validate the format and\n      // if there is any format restrictions for the connection\n      if ('usernameFormatErrorHint' === hintKey && validateFormat && usernameValidation != null) {\n        return i18n.str(hintKey, usernameValidation.min, usernameValidation.max);\n      }\n      return i18n.str(hintKey);\n    };\n    return _react2.default.createElement(_username_input2.default, {\n      value: value,\n      invalidHint: invalidHint(value),\n      isValid: !c.isFieldVisiblyInvalid(lock, 'username'),\n      onChange: this.handleChange.bind(this),\n      placeholder: placeholder,\n      autoComplete: allowAutocomplete,\n      disabled: l.submitting(lock)\n    });\n  };\n  return UsernamePane;\n}(_react2.default.Component);\nexports.default = UsernamePane;\nUsernamePane.propTypes = {\n  i18n: _propTypes2.default.object.isRequired,\n  lock: _propTypes2.default.object.isRequired,\n  placeholder: _propTypes2.default.string.isRequired,\n  validateFormat: _propTypes2.default.bool.isRequired,\n  usernameStyle: _propTypes2.default.oneOf(['any', 'email', 'username']),\n  strictValidation: _propTypes2.default.bool.isRequired\n};\nUsernamePane.defaultProps = {\n  validateFormat: false,\n  usernameStyle: 'username'\n};","map":null,"metadata":{},"sourceType":"script"}