{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n// TODO: this module should depend from social stuff\n\nexports.hasFreeSubscription = hasFreeSubscription;\nexports.connection = connection;\nexports.initClient = initClient;\nexports.clientConnections = clientConnections;\nvar _immutable = require('immutable');\nvar _immutable2 = _interopRequireDefault(_immutable);\nvar _auth0PasswordPolicies = require('auth0-password-policies');\nvar _auth0PasswordPolicies2 = _interopRequireDefault(_auth0PasswordPolicies);\nvar _data_utils = require('../../utils/data_utils');\nvar _index = require('../../connection/social/index');\nvar _enterprise = require('../../connection/enterprise');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _dataFns = (0, _data_utils.dataFns)(['client']),\n  initNS = _dataFns.initNS,\n  get = _dataFns.get;\nvar DEFAULT_CONNECTION_VALIDATION = {\n  username: {\n    min: 1,\n    max: 15\n  }\n};\nfunction hasFreeSubscription(m) {\n  return ['free', 'dev'].indexOf(get(m, ['tenant', 'subscription'])) > -1;\n}\nfunction connection(m, strategyName, name) {\n  // TODO: this function should take a client, not a map with a client\n  // key.\n  var connections = strategy(m, strategyName).get('connections', (0, _immutable.List)());\n  return connections.find(withName(name)) || (0, _immutable.Map)();\n}\nfunction strategy(m, name) {\n  // TODO: this function should take a client, not a map with a client\n  // key.\n  return m.getIn(['client', 'strategies'], (0, _immutable.List)()).find(withName(name)) || (0, _immutable.Map)();\n}\nfunction withName(name) {\n  return function (x) {\n    return x.get('name') === name;\n  };\n}\nfunction strategyNameToConnectionType(str) {\n  if (str === 'auth0') {\n    return 'database';\n  } else if (str === 'email' || str === 'sms') {\n    return 'passwordless';\n  } else if (_index.STRATEGIES[str]) {\n    return 'social';\n  } else if (_enterprise.STRATEGIES[str]) {\n    return 'enterprise';\n  } else if (['oauth1', 'oauth2'].indexOf(str) !== -1) {\n    return 'social';\n  } else {\n    return 'unknown';\n  }\n}\nfunction formatConnectionValidation() {\n  var connectionValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (connectionValidation.username == null) {\n    return null;\n  }\n  var validation = _extends({}, DEFAULT_CONNECTION_VALIDATION, connectionValidation);\n  var defaultMin = DEFAULT_CONNECTION_VALIDATION.username.min;\n  var defaultMax = DEFAULT_CONNECTION_VALIDATION.username.max;\n  validation.username.min = parseInt(validation.username.min, 10) || defaultMin;\n  validation.username.max = parseInt(validation.username.max, 10) || defaultMax;\n  if (validation.username.min > validation.username.max) {\n    validation.username.min = defaultMin;\n    validation.username.max = defaultMax;\n  }\n  return validation;\n}\nvar emptyConnections = _immutable2.default.fromJS({\n  database: [],\n  enterprise: [],\n  passwordless: [],\n  social: [],\n  unknown: [] // TODO: should be oauth2\n});\n\nfunction initClient(m, client) {\n  return initNS(m, formatClient(client));\n}\nfunction formatClient(o) {\n  return new _immutable2.default.fromJS({\n    id: o.id,\n    tenant: {\n      name: o.tenant,\n      subscription: o.subscription\n    },\n    connections: formatClientConnections(o)\n  });\n}\nfunction formatClientConnections(o) {\n  var result = emptyConnections.toJS();\n  var _loop = function _loop() {\n    var _result$connectionTyp;\n    var strategy = o.strategies[i];\n    var connectionType = strategyNameToConnectionType(strategy.name);\n    var connections = strategy.connections.map(function (connection) {\n      return formatClientConnection(connectionType, strategy.name, connection);\n    });\n    (_result$connectionTyp = result[connectionType]).push.apply(_result$connectionTyp, connections);\n  };\n  for (var i = 0; i < (o.strategies || []).length; i++) {\n    _loop();\n  }\n  return result;\n}\nfunction formatClientConnection(connectionType, strategyName, connection) {\n  var result = {\n    name: connection.name,\n    strategy: strategyName,\n    type: connectionType,\n    displayName: connection.display_name\n  };\n  if (connectionType === 'database') {\n    result.passwordPolicy = _auth0PasswordPolicies2.default[connection.passwordPolicy || 'none'];\n    if (connection.password_complexity_options && connection.password_complexity_options.min_length) {\n      result.passwordPolicy.length.minLength = connection.password_complexity_options.min_length;\n    }\n    result.allowSignup = typeof connection.showSignup === 'boolean' ? connection.showSignup : true;\n    result.allowForgot = typeof connection.showForgot === 'boolean' ? connection.showForgot : true;\n    result.requireUsername = typeof connection.requires_username === 'boolean' ? connection.requires_username : false;\n    result.validation = formatConnectionValidation(connection.validation);\n  }\n  if (connectionType === 'enterprise') {\n    var domains = connection.domain_aliases || [];\n    if (connection.domain) {\n      domains.unshift(connection.domain);\n    }\n    result.domains = domains;\n  }\n  return result;\n}\nfunction clientConnections(m) {\n  return get(m, 'connections', emptyConnections);\n}","map":null,"metadata":{},"sourceType":"script"}