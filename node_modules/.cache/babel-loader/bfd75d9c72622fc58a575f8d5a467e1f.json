{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = createFirebaseInstance, exports.getFirebase = getFirebase;\nvar _merge2 = _interopRequireDefault(require(\"lodash/fp/merge\")),\n  _isObject2 = _interopRequireDefault(require(\"lodash/isObject\")),\n  _utils = require(\"./utils\"),\n  _actions = require(\"./utils/actions\"),\n  authActions = _interopRequireWildcard(require(\"./actions/auth\")),\n  queryActions = _interopRequireWildcard(require(\"./actions/query\")),\n  storageActions = _interopRequireWildcard(require(\"./actions/storage\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (\"function\" != typeof WeakMap) return null;\n  var cacheBabelInterop = new WeakMap(),\n    cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) return obj;\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" != typeof obj) return {\n    default: obj\n  };\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) return cache.get(obj);\n  var newObj = {},\n    hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) if (\"default\" != key && Object.prototype.hasOwnProperty.call(obj, key)) {\n    var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n    desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];\n  }\n  return newObj.default = obj, cache && cache.set(obj, newObj), newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var source, i = 1; i < arguments.length; i++) source = null == arguments[i] ? {} : arguments[i], i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n    _defineProperty(target, key, source[key]);\n  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n  });\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  return key in obj ? Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : obj[key] = value, obj;\n}\nvar firebaseInstance;\nfunction createFirebaseInstance(firebase, configs, dispatch) {\n  configs && configs.enableLogging && firebase.database && \"function\" == typeof firebase.database.enableLogging && (console.warn(\"The enableLogging config option is disabled and will be removed in a future version of react-redux-firebase. Enable logging as part of instance initialization.\"), firebase.database.enableLogging(configs.enableLogging));\n  firebase._ = (0, _merge2.default)({\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }, firebase._);\n  var withMeta = function (method, path, value, onComplete) {\n      if ((0, _isObject2.default)(value)) {\n        var prefix = \"update\" === method ? \"updated\" : \"created\",\n          dataWithMeta = _objectSpread(_objectSpread({}, value), {}, _defineProperty({}, \"\".concat(prefix, \"At\"), firebase.database.ServerValue.TIMESTAMP));\n        return firebase.auth().currentUser && (dataWithMeta[\"\".concat(prefix, \"By\")] = firebase.auth().currentUser.uid), firebase.database().ref(path)[method](dataWithMeta, onComplete);\n      }\n      return firebase.database().ref(path)[method](value, onComplete);\n    },\n    actionCreators = (0, _actions.mapWithFirebaseAndDispatch)(firebase, dispatch, {\n      signInWithPhoneNumber: authActions.signInWithPhoneNumber\n    }, {\n      initializeAuth: authActions.init\n    });\n  return firebaseInstance = Object.assign(firebase, _objectSpread({\n    _reactReduxFirebaseExtended: !0,\n    ref: function ref(path) {\n      return firebase.database().ref(path);\n    },\n    set: function set(path, value, onComplete) {\n      return firebase.database().ref(path).set(value, onComplete);\n    },\n    setWithMeta: function setWithMeta(path, value, onComplete) {\n      return withMeta(\"set\", path, value, onComplete);\n    },\n    uniqueSet: function uniqueSet(path, value, onComplete) {\n      return firebase.database().ref(path).transaction(function (d) {\n        return null === d ? value : void 0;\n      }).then(function (_ref) {\n        var committed = _ref.committed,\n          snapshot = _ref.snapshot;\n        if (!committed) {\n          var newError = new Error(\"Path already exists.\");\n          return onComplete && onComplete(newError), Promise.reject(newError);\n        }\n        return onComplete && onComplete(snapshot), snapshot;\n      });\n    },\n    push: function push(path, value, onComplete) {\n      return firebase.database().ref(path).push(value, onComplete);\n    },\n    pushWithMeta: function pushWithMeta(path, value, onComplete) {\n      return withMeta(\"push\", path, value, onComplete);\n    },\n    remove: function remove(path, onComplete, options) {\n      return queryActions.remove(firebase, dispatch, path, options).then(function () {\n        return \"function\" == typeof onComplete && onComplete(), path;\n      });\n    },\n    update: function update(path, value, onComplete) {\n      return firebase.database().ref(path).update(value, onComplete);\n    },\n    updateWithMeta: function updateWithMeta(path, value, onComplete) {\n      return withMeta(\"update\", path, value, onComplete);\n    },\n    login: function login(credentials) {\n      return authActions.login(dispatch, firebase, credentials);\n    },\n    reauthenticate: function reauthenticate(credentials) {\n      return authActions.reauthenticate(dispatch, firebase, credentials);\n    },\n    handleRedirectResult: function handleRedirectResult(authData) {\n      return authActions.handleRedirectResult(dispatch, firebase, authData);\n    },\n    logout: function logout() {\n      return authActions.logout(dispatch, firebase);\n    },\n    updateAuth: function updateAuth(authUpdate, updateInProfile) {\n      return authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile);\n    },\n    updateEmail: function updateEmail(newEmail, updateInProfile) {\n      return authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile);\n    },\n    updateProfile: function updateProfile(profileUpdate, options) {\n      return authActions.updateProfile(dispatch, firebase, profileUpdate, options);\n    },\n    uploadFile: function uploadFile(path, file, dbPath, options) {\n      return storageActions.uploadFile(dispatch, firebase, {\n        path: path,\n        file: file,\n        dbPath: dbPath,\n        options: options\n      });\n    },\n    uploadFiles: function uploadFiles(path, files, dbPath, options) {\n      return storageActions.uploadFiles(dispatch, firebase, {\n        path: path,\n        files: files,\n        dbPath: dbPath,\n        options: options\n      });\n    },\n    deleteFile: function deleteFile(path, dbPath) {\n      return storageActions.deleteFile(dispatch, firebase, {\n        path: path,\n        dbPath: dbPath\n      });\n    },\n    createUser: function createUser(credentials, profile) {\n      return authActions.createUser(dispatch, firebase, credentials, profile);\n    },\n    resetPassword: function resetPassword(email) {\n      return authActions.resetPassword(dispatch, firebase, email);\n    },\n    confirmPasswordReset: function confirmPasswordReset(code, password) {\n      return authActions.confirmPasswordReset(dispatch, firebase, code, password);\n    },\n    verifyPasswordResetCode: function verifyPasswordResetCode(code) {\n      return authActions.verifyPasswordResetCode(dispatch, firebase, code);\n    },\n    applyActionCode: function applyActionCode(code) {\n      return authActions.applyActionCode(dispatch, firebase, code);\n    },\n    watchEvent: function watchEvent(type, path, storeAs) {\n      var options = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};\n      return queryActions.watchEvent(firebase, dispatch, _objectSpread({\n        type: type,\n        path: path,\n        storeAs: storeAs\n      }, options));\n    },\n    unWatchEvent: function unWatchEvent(type, path, queryId) {\n      var options = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : {};\n      return queryActions.unWatchEvent(firebase, dispatch, _objectSpread({\n        type: type,\n        path: path,\n        queryId: queryId\n      }, options));\n    },\n    reloadAuth: function reloadAuth() {\n      return authActions.reloadAuth(dispatch, firebase);\n    },\n    linkWithCredential: function linkWithCredential(credential) {\n      return authActions.linkWithCredential(dispatch, firebase, credential);\n    },\n    promiseEvents: function promiseEvents(watchArray, options) {\n      var inputAsFunc = (0, _utils.createCallable)(watchArray),\n        prevData = inputAsFunc(options, firebase),\n        queryConfigs = (0, _utils.getEventsFromInput)(prevData);\n      return Promise.all(queryConfigs.map(function (queryConfig) {\n        return queryActions.watchEvent(firebase, dispatch, queryConfig);\n      }));\n    },\n    dispatch: dispatch\n  }, actionCreators)), firebaseInstance;\n}\nfunction getFirebase() {\n  if (!firebaseInstance) throw new Error(\"Firebase instance does not yet exist. Check your compose function.\");\n  return firebaseInstance;\n}","map":{"version":3,"sources":["../src/createFirebaseInstance.js"],"names":["firebaseInstance","createFirebaseInstance","firebase","configs","dispatch","enableLogging","database","console","warn","watchers","listeners","callbacks","queries","config","authUid","_","withMeta","method","path","value","onComplete","prefix","dataWithMeta","ServerValue","TIMESTAMP","auth","currentUser","uid","ref","set","setWithMeta","push","pushWithMeta","update","updateWithMeta","remove","options","queryActions","then","uniqueSet","transaction","d","committed","snapshot","newError","Error","Promise","reject","uploadFile","file","dbPath","storageActions","uploadFiles","files","deleteFile","watchEvent","type","storeAs","unWatchEvent","queryId","promiseEvents","watchArray","inputAsFunc","prevData","queryConfigs","all","map","queryConfig","login","credentials","authActions","reauthenticate","handleRedirectResult","authData","logout","createUser","profile","resetPassword","email","confirmPasswordReset","code","password","verifyPasswordResetCode","applyActionCode","updateProfile","profileUpdate","updateAuth","authUpdate","updateInProfile","updateEmail","newEmail","reloadAuth","linkWithCredential","credential","actionCreators","signInWithPhoneNumber","initializeAuth","init","Object","assign","_reactReduxFirebaseExtended","getFirebase"],"mappings":"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","sourcesContent":["import { isObject } from 'lodash'\nimport { merge } from 'lodash/fp'\nimport { getEventsFromInput, createCallable } from './utils'\nimport { mapWithFirebaseAndDispatch } from './utils/actions'\nimport * as authActions from './actions/auth'\nimport * as queryActions from './actions/query'\nimport * as storageActions from './actions/storage'\n\nlet firebaseInstance\n\n/**\n * Create an extended firebase instance that has methods attached\n * which dispatch redux actions.\n * @param {object} firebase - Firebase instance which to extend\n * @param {object} configs - Configuration object\n * @param {Function} dispatch - Action dispatch function\n * @returns {object} Extended Firebase instance\n */\nexport default function createFirebaseInstance(firebase, configs, dispatch) {\n  /* istanbul ignore next: Logging is external */\n  // Enable Logging based on config (handling instances without i.e RNFirebase)\n  // NOTE: This will be removed in a future version\n  if (\n    configs &&\n    configs.enableLogging &&\n    firebase.database &&\n    typeof firebase.database.enableLogging === 'function'\n  ) {\n    /* eslint-disable no-console */\n    console.warn(\n      'The enableLogging config option is disabled and will be removed in a future version of react-redux-firebase. Enable logging as part of instance initialization.'\n    )\n    /* eslint-enable no-console */\n    firebase.database.enableLogging(configs.enableLogging)\n  }\n\n  // Add internal variables to firebase instance\n  const defaultInternals = {\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }\n\n  firebase._ = merge(defaultInternals, firebase._) // eslint-disable-line no-param-reassign\n\n  /**\n   * @private\n   * @param {string} method - Method to run with meta attached\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete\n   * @returns {Promise} Containing reference snapshot\n   */\n  const withMeta = (method, path, value, onComplete) => {\n    if (isObject(value)) {\n      const prefix = method === 'update' ? 'updated' : 'created'\n      const dataWithMeta = {\n        ...value,\n        [`${prefix}At`]: firebase.database.ServerValue.TIMESTAMP\n      }\n      if (firebase.auth().currentUser) {\n        dataWithMeta[`${prefix}By`] = firebase.auth().currentUser.uid\n      }\n      return firebase.database().ref(path)[method](dataWithMeta, onComplete)\n    }\n    return firebase.database().ref(path)[method](value, onComplete)\n  }\n\n  /**\n   * Sets data to Firebase.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#set\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * function Example({ firebase: { set } }) {\n   *   return (\n   *     <button onClick={() => set('some/path', { here: 'is a value' })}>\n   *     Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const set = (path, value, onComplete) =>\n    firebase.database().ref(path).set(value, onComplete)\n\n  /**\n   * Sets data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy. *Warning* using this function\n   * may have unintented consequences (setting createdAt even if data already\n   * exists).\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#update\n   */\n  const setWithMeta = (path, value, onComplete) =>\n    withMeta('set', path, value, onComplete)\n\n  /**\n   * Pushes data to Firebase.\n   * @param {string} path - Path to location on Firebase which to push\n   * @param {object|string|boolean|number} value - Value to push to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#push\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { push } }) {\n   *   return (\n   *     <button onClick={() => push('some/path', true)}>\n   *       Push To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const push = (path, value, onComplete) =>\n    firebase.database().ref(path).push(value, onComplete)\n\n  /**\n   * Pushes data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#pushwithmeta\n   */\n  const pushWithMeta = (path, value, onComplete) =>\n    withMeta('push', path, value, onComplete)\n\n  /**\n   * Updates data on Firebase and sends new data. More info\n   * available in [the docs](https://react-redux-firebase.com/docs/api/firebaseInstance.html#update).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { update } }) {\n   *   function updateData() {\n   *     update('some/path', { here: 'is a value' })\n   *   }\n   * }\n   *   return (\n   *     <button onClick={updateData}>\n   *       Update To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const update = (path, value, onComplete) =>\n    firebase.database().ref(path).update(value, onComplete)\n\n  /**\n   * Updates data on Firebase along with meta. *Warning*\n   * using this function may have unintented consequences (setting\n   * createdAt even if data already exists).\n   * @param {string} path - Path to location on Firebase which to update\n   * @param {object|string|boolean|number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updatewithmeta\n   */\n  const updateWithMeta = (path, value, onComplete) =>\n    withMeta('update', path, value, onComplete)\n\n  /**\n   * Removes data from Firebase at a given path. **NOTE** A\n   * seperate action is not dispatched unless `dispatchRemoveAction: true` is\n   * provided to config on store creation. That means that a listener must\n   * be attached in order for state to be updated when calling remove.\n   * @param {string} path - Path to location on Firebase which to remove\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @param {Function} options - Options object\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#remove\n   * @example <caption>Basic</caption>\n   * import React from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { remove } }) {\n   *   return (\n   *     <button onClick={() => remove('some/path')}>\n   *       Remove From Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const remove = (path, onComplete, options) =>\n    queryActions.remove(firebase, dispatch, path, options).then(() => {\n      if (typeof onComplete === 'function') onComplete()\n      return path\n    })\n\n  /**\n   * Sets data to Firebase only if the path does not already\n   * exist, otherwise it rejects. Internally uses a Firebase transaction to\n   * prevent a race condition between seperate clients calling uniqueSet.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {object|string|boolean|number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @returns {Promise} Containing reference snapshot\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uniqueset\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   *\n   * function Example({ firebase: { uniqueSet } }) {\n   *   return (\n   *     <button onClick={() => uniqueSet('some/unique/path', true)}>\n   *       Unique Set To Firebase\n   *     </button>\n   *   )\n   * }\n   * export default firebaseConnect()(Example)\n   */\n  const uniqueSet = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .transaction((d) => (d === null ? value : undefined))\n      .then(({ committed, snapshot }) => {\n        if (!committed) {\n          const newError = new Error('Path already exists.')\n          if (onComplete) onComplete(newError)\n          return Promise.reject(newError)\n        }\n        if (onComplete) onComplete(snapshot)\n        return snapshot\n      })\n\n  /**\n   * Upload a file to Firebase Storage with the option to store\n   * its metadata in Firebase Database. More info available\n   * in [the docs]().\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {File} file - File object to upload (usually first element from\n   * array output of select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @param {object} options.metdata - Metadata for the file (passed as second\n   * argument to storage.put calls)\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfile\n   */\n  const uploadFile = (path, file, dbPath, options) =>\n    storageActions.uploadFile(dispatch, firebase, {\n      path,\n      file,\n      dbPath,\n      options\n    })\n\n  /**\n   * Upload multiple files to Firebase Storage with the option\n   * to store their metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {Array} files - Array of File objects to upload (usually from\n   * a select-file or a drag/drop `onDrop`)\n   * @param {string} dbPath - Database path to place uploaded files metadata.\n   * @param {object} options - Options\n   * @param {string} options.name - Name of the file\n   * @returns {Promise} Containing an array of File objects\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#uploadfiles\n   */\n  const uploadFiles = (path, files, dbPath, options) =>\n    storageActions.uploadFiles(dispatch, firebase, {\n      path,\n      files,\n      dbPath,\n      options\n    })\n\n  /**\n   * Delete a file from Firebase Storage with the option to\n   * remove its metadata in Firebase Database.\n   * @param {string} path - Path to location on Firebase which to set\n   * @param {string} dbPath - Database path to place uploaded file metadata\n   * @returns {Promise} Containing the File object\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#deletefile\n   */\n  const deleteFile = (path, dbPath) =>\n    storageActions.deleteFile(dispatch, firebase, { path, dbPath })\n\n  /**\n   * Watch event. **Note:** this method is used internally\n   * so examples have not yet been created, and it may not work as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to set listener\n   * @param {string} storeAs - Name of listener results within redux store\n   * @param {object} options - Event options object\n   * @param {Array} options.queryParams - List of parameters for the query\n   * @param {string} options.queryId - id of the query\n   * @returns {Promise|void} Results of calling watch event\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#watchevent\n   */\n  const watchEvent = (type, path, storeAs, options = {}) =>\n    queryActions.watchEvent(firebase, dispatch, {\n      type,\n      path,\n      storeAs,\n      ...options\n    })\n\n  /**\n   * Unset a listener watch event. **Note:** this method is used\n   * internally so examples have not yet been created, and it may not work\n   * as expected.\n   * @param {string} type - Type of watch event\n   * @param {string} path - Path to location on Firebase which to unset listener\n   * @param {string} queryId - Id of the listener\n   * @param {object} options - Event options object\n   * @returns {void}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#unwatchevent\n   */\n  const unWatchEvent = (type, path, queryId, options = {}) =>\n    queryActions.unWatchEvent(firebase, dispatch, {\n      type,\n      path,\n      queryId,\n      ...options\n    })\n\n  /**\n   * Similar to the firebaseConnect Higher Order Component but\n   * presented as a function (not a React Component). Useful for populating\n   * your redux state without React, e.g., for server side rendering. Only\n   * `once` type should be used as other query types such as `value` do not\n   * return a Promise.\n   * @param {Array} watchArray - Array of objects or strings for paths to sync\n   * from Firebase. Can also be a function that returns the array. The function\n   * is passed the props object specified as the next parameter.\n   * @param {object} options - The options object that you would like to pass to\n   * your watchArray generating function.\n   * @returns {Promise} Resolves with an array of watchEvent results\n   */\n  const promiseEvents = (watchArray, options) => {\n    const inputAsFunc = createCallable(watchArray)\n    const prevData = inputAsFunc(options, firebase)\n    const queryConfigs = getEventsFromInput(prevData)\n    // TODO: Handle calling with non promise queries (must be once or first_child)\n    return Promise.all(\n      queryConfigs.map((queryConfig) =>\n        queryActions.watchEvent(firebase, dispatch, queryConfig)\n      )\n    )\n  }\n\n  /**\n   * Logs user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @param {string} credentials.emailLink - emailLink for authenticating (only used with passwordless sign-in)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const login = (credentials) =>\n    authActions.login(dispatch, firebase, credentials)\n\n  /**\n   * Reauthenticate user into Firebase. For examples, visit the\n   * [auth section of the docs](https://react-redux-firebase.com/docs/auth.html) or the\n   * [auth recipes section](https://react-redux-firebase.com/docs/recipes/auth.html).\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {string} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#logincredentials\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#login\n   */\n  const reauthenticate = (credentials) =>\n    authActions.reauthenticate(dispatch, firebase, credentials)\n\n  /**\n   * Logs user into Firebase using external. For examples, visit the\n   * [auth section](/docs/recipes/auth.md)\n   * @param {object} authData - Auth data from Firebase's getRedirectResult\n   * @returns {Promise} Containing user's profile\n   */\n  const handleRedirectResult = (authData) =>\n    authActions.handleRedirectResult(dispatch, firebase, authData)\n\n  /**\n   * Logs user out of Firebase and empties firebase state from\n   * redux store\n   * @returns {Promise} Resolves after logout is complete\n   * @see https://react-redux-firebase.com/docs/auth.html#logout\n   */\n  const logout = () => authActions.logout(dispatch, firebase)\n\n  /**\n   * Creates a new user in Firebase authentication. If\n   * `userProfile` config option is set, user profiles will be set to this\n   * location.\n   * @param {object} credentials - Credentials for authenticating\n   * @param {string} credentials.email - Credentials for authenticating\n   * @param {string} credentials.password - Credentials for authenticating (only used with email)\n   * @param {object} profile - Data to include within new user profile\n   * @returns {Promise} Containing user's auth data\n   * @see https://react-redux-firebase.com/docs/auth.html#createuser\n   */\n  const createUser = (credentials, profile) =>\n    authActions.createUser(dispatch, firebase, credentials, profile)\n\n  /**\n   * Sends password reset email\n   * @param {string} email - Email to send recovery email to\n   * @returns {Promise} Resolves after password reset email is sent\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#resetpassword\n   */\n  const resetPassword = (email) =>\n    authActions.resetPassword(dispatch, firebase, email)\n\n  /**\n   * Confirm that a user's password has been reset\n   * @param {string} code - Password reset code to verify\n   * @param {string} password - New Password to confirm reset to\n   * @returns {Promise} Resolves after password reset is confirmed\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#confirmpasswordreset\n   */\n  const confirmPasswordReset = (code, password) =>\n    authActions.confirmPasswordReset(dispatch, firebase, code, password)\n\n  /**\n   * Verify that a password reset code from a password reset\n   * email is valid\n   * @param {string} code - Password reset code to verify\n   * @returns {Promise} Containing user auth info\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#verifypasswordreset\n   */\n  const verifyPasswordResetCode = (code) =>\n    authActions.verifyPasswordResetCode(dispatch, firebase, code)\n\n  /**\n   * Apply verification code\n   * @param {string} code - Verification code\n   * @returns {Promise} Resolves on success\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#applyactioncode\n   */\n  const applyActionCode = (code) =>\n    authActions.applyActionCode(dispatch, firebase, code)\n\n  /**\n   * Update user profile on Firebase Real Time Database or\n   * Firestore (if `useFirestoreForProfile: true` config included).\n   * Real Time Database update uses `update` method internally while\n   * updating profile on Firestore uses `set`.\n   * @param {object} profileUpdate - Profile data to place in new profile\n   * @param {object} options - Options object (used to change how profile\n   * update occurs)\n   * @param {boolean} [options.useSet=true] - Use set with merge instead of\n   * update. Setting to `false` uses update (can cause issue of profile document\n   * does not exist). Note: Only used when updating profile on Firestore\n   * @param {boolean} [options.merge=true] - Whether or not to use merge when\n   * setting profile. Note: Only used when updating profile on Firestore\n   * @returns {Promise} Returns after updating profile within database\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateprofile\n   */\n  const updateProfile = (profileUpdate, options) =>\n    authActions.updateProfile(dispatch, firebase, profileUpdate, options)\n\n  /**\n   * Update Auth profile object\n   * @param {object} authUpdate - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Returns after updating auth profile\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateauth\n   */\n  const updateAuth = (authUpdate, updateInProfile) =>\n    authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile)\n\n  /**\n   * Update user's email\n   * @param {string} newEmail - Update to be auth object\n   * @param {boolean} updateInProfile - Update in profile\n   * @returns {Promise} Resolves after email is updated in user's auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#updateemail\n   */\n  const updateEmail = (newEmail, updateInProfile) =>\n    authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile)\n\n  /**\n   * Reload user's auth object. Must be authenticated.\n   * @returns {Promise} Resolves after reloading firebase auth\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#reloadauth\n   */\n  const reloadAuth = () => authActions.reloadAuth(dispatch, firebase)\n\n  /**\n   * Links the user account with the given credentials.\n   * @param {firebase.auth.AuthCredential} credential - The auth credential\n   * @returns {Promise} Resolves after linking auth with a credential\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#linkwithcredential\n   */\n  const linkWithCredential = (credential) =>\n    authActions.linkWithCredential(dispatch, firebase, credential)\n\n  /**\n   * @name signInWithPhoneNumber\n   * Asynchronously signs in using a phone number. This method\n   * sends a code via SMS to the given phone number, and returns a modified\n   * firebase.auth.ConfirmationResult. The `confirm` method\n   * authenticates and does profile handling.\n   * @param {firebase.auth.ConfirmationResult} credential - The auth credential\n   * @returns {Promise}\n   * @see https://react-redux-firebase.com/docs/api/firebaseInstance.html#signinwithphonenumber\n   */\n\n  /**\n   * @name initializeAuth\n   * Initialize auth to work with build in profile support\n   */\n  const actionCreators = mapWithFirebaseAndDispatch(\n    firebase,\n    dispatch,\n    // Actions with arg order (firebase, dispatch)\n    {\n      signInWithPhoneNumber: authActions.signInWithPhoneNumber\n    },\n    // Actions with arg order (dispatch, firebase)\n    {\n      initializeAuth: authActions.init\n    }\n  )\n\n  /**\n   * @name ref\n   * @description Firebase ref function\n   * @returns {firebase.database.Reference}\n   */\n  /**\n   * @name database\n   * @description Firebase database service instance including all Firebase storage methods\n   * @returns {firebase.database.Database} Firebase database service\n   */\n  /**\n   * @name storage\n   * @description Firebase storage service instance including all Firebase storage methods\n   * @returns {firebase.database.Storage} Firebase storage service\n   */\n  /**\n   * @name auth\n   * @description Firebase auth service instance including all Firebase auth methods\n   * @returns {firebase.database.Auth}\n   */\n  firebaseInstance = Object.assign(firebase, {\n    _reactReduxFirebaseExtended: true,\n    ref: (path) => firebase.database().ref(path),\n    set,\n    setWithMeta,\n    uniqueSet,\n    push,\n    pushWithMeta,\n    remove,\n    update,\n    updateWithMeta,\n    login,\n    reauthenticate,\n    handleRedirectResult,\n    logout,\n    updateAuth,\n    updateEmail,\n    updateProfile,\n    uploadFile,\n    uploadFiles,\n    deleteFile,\n    createUser,\n    resetPassword,\n    confirmPasswordReset,\n    verifyPasswordResetCode,\n    applyActionCode,\n    watchEvent,\n    unWatchEvent,\n    reloadAuth,\n    linkWithCredential,\n    promiseEvents,\n    dispatch,\n    ...actionCreators\n  })\n  return firebaseInstance\n}\n\n/**\n * Get internal Firebase instance with methods which are wrapped with action dispatches. Useful for\n * integrations into external libraries such as redux-thunk and redux-observable.\n * @returns {object} Firebase instance with methods which dispatch redux actions\n * @see http://react-redux-firebase.com/api/getFirebase.html\n * @example <caption>redux-thunk integration</caption>\n * import { applyMiddleware, compose, createStore } from 'redux';\n * import thunk from 'redux-thunk';\n * import { getFirebase } from 'react-redux-firebase';\n * import makeRootReducer from './reducers';\n *\n * const fbConfig = {} // your firebase config\n *\n * const store = createStore(\n *   makeRootReducer(),\n *   initialState,\n *   compose(\n *     applyMiddleware([\n *       // Pass getFirebase function as extra argument\n *       thunk.withExtraArgument(getFirebase)\n *     ])\n *   )\n * );\n * // then later\n * export function addTodo(newTodo) {\n *   return (dispatch, getState, getFirebase) => {\n *     const firebase = getFirebase()\n *     firebase\n *       .push('todos', newTodo)\n *       .then(() => {\n *         dispatch({ type: 'SOME_ACTION' })\n *       })\n *   }\n * }\n */\nexport function getFirebase() {\n  /* istanbul ignore next: Firebase instance always exists during tests */\n  if (!firebaseInstance) {\n    throw new Error(\n      'Firebase instance does not yet exist. Check your compose function.'\n    ) // eslint-disable-line no-console\n  }\n  return firebaseInstance\n}\n"]},"metadata":{},"sourceType":"script"}