{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _index = require('../store/index');\nvar _error_screen = require('../core/error_screen');\nvar _error_screen2 = _interopRequireDefault(_error_screen);\nvar _loading_screen = require('../core/loading_screen');\nvar _loading_screen2 = _interopRequireDefault(_loading_screen);\nvar _social_or_email_login_screen = require('./passwordless/social_or_email_login_screen');\nvar _social_or_email_login_screen2 = _interopRequireDefault(_social_or_email_login_screen);\nvar _social_or_phone_number_login_screen = require('./passwordless/social_or_phone_number_login_screen');\nvar _social_or_phone_number_login_screen2 = _interopRequireDefault(_social_or_phone_number_login_screen);\nvar _ask_vcode = require('../connection/passwordless/ask_vcode');\nvar _ask_vcode2 = _interopRequireDefault(_ask_vcode);\nvar _last_login_screen = require('../core/sso/last_login_screen');\nvar _last_login_screen2 = _interopRequireDefault(_last_login_screen);\nvar _index2 = require('../connection/passwordless/index');\nvar _sync = require('../sync');\nvar _index3 = require('../core/index');\nvar l = _interopRequireWildcard(_index3);\nvar _quick_auth = require('../quick_auth');\nvar _index4 = require('../core/sso/index');\nvar sso = _interopRequireWildcard(_index4);\nvar _email = require('../field/email');\nvar _phone_number = require('../field/phone_number');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar setPrefill = function setPrefill(m) {\n  var _l$prefill$toJS = l.prefill(m).toJS(),\n    email = _l$prefill$toJS.email,\n    phoneNumber = _l$prefill$toJS.phoneNumber;\n  if (typeof email === 'string') {\n    m = (0, _email.setEmail)(m, email);\n  }\n  if (typeof phoneNumber === 'string') {\n    m = (0, _phone_number.setPhoneNumber)(m, phoneNumber);\n  }\n  return m;\n};\nvar Passwordless = function () {\n  function Passwordless() {\n    _classCallCheck(this, Passwordless);\n  }\n  Passwordless.prototype.didInitialize = function didInitialize(m, opts) {\n    m = (0, _index2.initPasswordless)(m, opts);\n    return m;\n  };\n  Passwordless.prototype.didReceiveClientSettings = function didReceiveClientSettings(m) {\n    var anySocialConnection = l.hasSomeConnections(m, 'social');\n    var anyPasswordlessConnection = l.hasSomeConnections(m, 'passwordless');\n    if (!anySocialConnection && !anyPasswordlessConnection) {\n      var error = new Error('At least one email, sms or social connection needs to be available.');\n      error.code = 'no_connection';\n      m = l.stop(m, error);\n    }\n    m = setPrefill(m);\n    return m;\n  };\n  Passwordless.prototype.render = function render(m) {\n    //if there's an error, we should show the error screen no matter what.\n    if (l.hasStopped(m)) {\n      return new _error_screen2.default();\n    }\n\n    // TODO: remove the detail about the loading pane being pinned,\n    // sticky screens should be handled at the box module.\n    if (!(0, _sync.isDone)(m) || m.get('isLoadingPanePinned')) {\n      return new _loading_screen2.default();\n    }\n    if (!(0, _quick_auth.hasSkippedQuickAuth)(m)) {\n      if (l.ui.rememberLastLogin(m)) {\n        var lastUsedConnection = sso.lastUsedConnection(m);\n        var lastUsedUsername = sso.lastUsedUsername(m);\n        if (lastUsedConnection && (0, _sync.isSuccess)(m, 'sso') && l.hasConnection(m, lastUsedConnection.get('name')) && ['passwordless', 'social'].indexOf(l.findConnection(m, lastUsedConnection.get('name')).get('type')) >= 0 //if connection.type is either passwordless or social\n        ) {\n          var conn = l.findConnection(m, lastUsedConnection.get('name'));\n          var connectionType = conn.get('type');\n          if (connectionType === 'passwordless' || connectionType === 'social') {\n            return new _last_login_screen2.default();\n          }\n        }\n      }\n    }\n    if ((0, _index2.isEmail)(m)) {\n      return (0, _index2.isSendLink)(m) || !(0, _index2.passwordlessStarted)(m) ? new _social_or_email_login_screen2.default() : new _ask_vcode2.default();\n    } else {\n      return (0, _index2.passwordlessStarted)(m) ? new _ask_vcode2.default() : new _social_or_phone_number_login_screen2.default();\n    }\n  };\n  return Passwordless;\n}();\nexports.default = new Passwordless();","map":null,"metadata":{},"sourceType":"script"}