{"ast":null,"code":"import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector('script[src=\"'.concat(src, '\"]'));\n    // Call onLoad if script marked as loaded.\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(param) {\n  let {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey\n  } = param;\n  const [googleCharts, setGoogleCharts] = useState(null);\n  const [failed, setFailed] = useState(false);\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", () => {\n    // @ts-expect-error Getting object from global namespace.\n    const google = window === null || window === void 0 ? void 0 : window.google;\n    if (!google) {\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey\n    });\n    google.charts.setOnLoadCallback(() => {\n      setGoogleCharts(google);\n    });\n  }, () => {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nfunction LoadGoogleCharts(param) {\n  let {\n    onLoad,\n    onError,\n    ...params\n  } = param;\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\nconst chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nlet uniqueID = 0;\nconst generateUniqueID = () => {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\nconst DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nconst loadDataTableFromSpreadSheet = async function (googleViz, spreadSheetUrl) {\n  let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n  return new Promise((resolve, reject) => {\n    const headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n    const queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n    const gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n    const sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n    const access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n    const urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n    const urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send(response => {\n      if (response.isError()) {\n        reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\nconst {\n  Provider,\n  Consumer\n} = /*#__PURE__*/React.createContext(chartDefaultProps);\nconst ContextProvider = param => {\n  let {\n    children,\n    value\n  } = param;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\nconst ContextConsumer = param => {\n  let {\n    render\n  } = param;\n  return /*#__PURE__*/React.createElement(Consumer, null, context => {\n    return render(context);\n  });\n};\nconst GRAY_COLOR = \"#CCCCCC\";\nclass GoogleChartDataTableInner extends React.Component {\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n  componentWillUnmount() {\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n    }\n  }\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hiddenColumns: []\n    };\n    this.listenToLegendToggle = () => {\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (selection.length === 0 ||\n        // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState(state => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns.filter(colID => colID !== columnID)]\n          }));\n        } else {\n          this.setState(state => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID]\n          }));\n        }\n      });\n    };\n    this.applyFormatters = (dataTable, formatters) => {\n      const {\n        google\n      } = this.props;\n      for (let formatter of formatters) {\n        switch (formatter.type) {\n          case \"ArrowFormat\":\n            {\n              const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"BarFormat\":\n            {\n              const vizFormatter = new google.visualization.BarFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"ColorFormat\":\n            {\n              const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n              const {\n                ranges\n              } = formatter;\n              for (let range of ranges) {\n                vizFormatter.addRange(...range);\n              }\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"DateFormat\":\n            {\n              const vizFormatter = new google.visualization.DateFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"NumberFormat\":\n            {\n              const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n          case \"PatternFormat\":\n            {\n              const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n              vizFormatter.format(dataTable, formatter.column);\n              break;\n            }\n        }\n      }\n    };\n    this.getColumnID = (dataTable, columnIndex) => {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    this.draw = async param => {\n      let {\n        data,\n        diffdata,\n        rows,\n        columns,\n        options,\n        legend_toggle,\n        legendToggle,\n        chartType,\n        formatters,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      } = param;\n      const {\n        google,\n        googleChartWrapper\n      } = this.props;\n      let dataTable;\n      let chartDiff = null;\n      if (diffdata) {\n        const oldData = google.visualization.arrayToDataTable(diffdata.old);\n        const newData = google.visualization.arrayToDataTable(diffdata.new);\n        chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n      }\n      if (data !== null) {\n        if (Array.isArray(data)) {\n          dataTable = google.visualization.arrayToDataTable(data);\n        } else {\n          dataTable = new google.visualization.DataTable(data);\n        }\n      } else if (rows && columns) {\n        dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n      } else if (spreadSheetUrl) {\n        dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n      } else {\n        dataTable = google.visualization.arrayToDataTable([]);\n      }\n      const columnCount = dataTable.getNumberOfColumns();\n      for (let i = 0; i < columnCount; i += 1) {\n        const columnID = this.getColumnID(dataTable, i);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          const previousColumnLabel = dataTable.getColumnLabel(i);\n          const previousColumnID = dataTable.getColumnId(i);\n          const previousColumnType = dataTable.getColumnType(i);\n          dataTable.removeColumn(i);\n          dataTable.addColumn({\n            label: previousColumnLabel,\n            id: previousColumnID,\n            type: previousColumnType\n          });\n        }\n      }\n      const chart = googleChartWrapper.getChart();\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        chart && chart.clearChart();\n      }\n      googleChartWrapper.setChartType(chartType);\n      googleChartWrapper.setOptions(options || {});\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n      if (this.props.googleChartDashboard !== null) {\n        this.props.googleChartDashboard.draw(dataTable);\n      }\n      if (chartDiff) {\n        googleChartWrapper.setDataTable(chartDiff);\n        googleChartWrapper.draw();\n      }\n      if (formatters) {\n        this.applyFormatters(dataTable, formatters);\n        googleChartWrapper.setDataTable(dataTable);\n        googleChartWrapper.draw();\n      }\n      if (legendToggle === true || legend_toggle === true) {\n        this.grayOutHiddenColumns({\n          options\n        });\n      }\n      return;\n    };\n    this.grayOutHiddenColumns = param => {\n      let {\n        options\n      } = param;\n      const {\n        googleChartWrapper\n      } = this.props;\n      const dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      const columnCount = dataTable.getNumberOfColumns();\n      const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      const colors = Array.from({\n        length: columnCount - 1\n      }).map((dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions({\n        ...options,\n        colors\n      });\n      googleChartWrapper.draw();\n    };\n    this.onResize = () => {\n      const {\n        googleChartWrapper\n      } = this.props;\n      googleChartWrapper.draw();\n    };\n  }\n}\nclass GoogleChartDataTable extends React.Component {\n  componentDidMount() {}\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const {\n      google,\n      googleChartWrapper,\n      googleChartDashboard\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: props => {\n        return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n          google: google,\n          googleChartWrapper: googleChartWrapper,\n          googleChartDashboard: googleChartDashboard\n        }));\n      }\n    });\n  }\n}\nclass GoogleChartEvents extends React.Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents(param) {\n    let {\n      chartEvents,\n      google,\n      googleChartWrapper\n    } = param;\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      var _this = this;\n      const {\n        eventName,\n        callback\n      } = event;\n      google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback({\n          chartWrapper: googleChartWrapper,\n          props: _this.props,\n          google: google,\n          eventArgs: args\n        });\n      });\n    }\n  }\n  componentDidMount() {\n    var ref;\n    const {\n      google,\n      googleChartWrapper\n    } = this.props;\n    this.listenToEvents({\n      chartEvents: ((ref = this.propsFromContext) === null || ref === void 0 ? void 0 : ref.chartEvents) || null,\n      google,\n      googleChartWrapper\n    });\n  }\n  render() {\n    this.props;\n    return /*#__PURE__*/React.createElement(ContextConsumer, {\n      render: propsFromContext => {\n        this.propsFromContext = propsFromContext;\n        return null;\n      }\n    });\n  }\n  constructor(props) {\n    super(props);\n    this.propsFromContext = null;\n  }\n}\nlet controlCounter = 0;\nclass GoogleChart extends React.Component {\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper\n    } = this.props;\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n    const googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n    if (toolbarItems) {\n      google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n    }\n    let googleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google\n      });\n    }\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n    const {\n      controls\n    } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const {\n          controlType,\n          options,\n          controlWrapperParams\n        } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n  }\n  render() {\n    const {\n      width,\n      height,\n      options,\n      style\n    } = this.props;\n    const divStyle = {\n      height: height || options && options.height,\n      width: width || options && options.width,\n      ...style\n    };\n    if (this.props.render) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref,\n        id: \"toolbar\"\n      }), this.props.render({\n        renderChart: this.renderChart,\n        renderControl: this.renderControl,\n        renderToolbar: this.renderToolBar\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.dashboard_ref,\n        style: divStyle\n      }, this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition !== \"bottom\";\n      }), this.renderChart(), this.renderControl(param => {\n        let {\n          controlProp\n        } = param;\n        return controlProp.controlPosition === \"bottom\";\n      }), this.renderToolBar());\n    }\n  }\n  constructor(...args1) {\n    var _this1;\n    super(...args1), _this1 = this;\n    this.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    this.graphID = null;\n    this.dashboard_ref = /*#__PURE__*/React.createRef();\n    this.toolbar_ref = /*#__PURE__*/React.createRef();\n    this.getGraphID = () => {\n      const {\n        graphID,\n        graph_id\n      } = this.props;\n      let instanceGraphID;\n      if (!graphID && !graph_id) {\n        if (!this.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = this.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n      this.graphID = instanceGraphID;\n      return this.graphID;\n    };\n    this.getControlID = (id, index) => {\n      controlCounter += 1;\n      let controlID;\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n      return controlID;\n    };\n    this.addControls = (googleChartWrapper, googleChartDashboard) => {\n      const {\n        google,\n        controls\n      } = this.props;\n      const googleChartControls = !controls ? null : controls.map((control, i) => {\n        const {\n          controlID: controlIDMaybe,\n          controlType,\n          options: controlOptions,\n          controlWrapperParams\n        } = control;\n        const controlID = this.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper({\n            containerId: controlID,\n            controlType,\n            options: controlOptions,\n            ...controlWrapperParams\n          })\n        };\n      });\n      if (!googleChartControls) {\n        return null;\n      }\n      googleChartDashboard.bind(googleChartControls.map(param => {\n        let {\n          control\n        } = param;\n        return control;\n      }), googleChartWrapper);\n      for (let chartControl of googleChartControls) {\n        const {\n          control,\n          controlProp\n        } = chartControl;\n        const {\n          controlEvents = []\n        } = controlProp;\n        for (let event of controlEvents) {\n          var _this = this;\n          const {\n            callback,\n            eventName\n          } = event;\n          google.visualization.events.removeListener(control, eventName, callback);\n          google.visualization.events.addListener(control, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        }\n      }\n      return googleChartControls;\n    };\n    this.renderChart = () => {\n      const {\n        width,\n        height,\n        options,\n        style,\n        className,\n        rootProps,\n        google\n      } = this.props;\n      const divStyle = {\n        height: height || options && options.height,\n        width: width || options && options.width,\n        ...style\n      };\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: this.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), this.state.isReady && this.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: this.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: this.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n    this.renderControl = function () {\n      let filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : param => {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(param => {\n        let {\n          controlProp,\n          control\n        } = param;\n        return filter({\n          control,\n          controlProp\n        });\n      }).map(param => {\n        let {\n          control,\n          controlProp\n        } = param;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n    this.renderToolBar = () => {\n      if (!this.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.toolbar_ref\n      });\n    };\n  }\n}\nclass Chart$1 extends React.Component {\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement\n    } = this.props;\n    return /*#__PURE__*/React.createElement(ContextProvider, {\n      value: this.props\n    }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n      google: this.state.google\n    })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n      chartLanguage: chartLanguage,\n      chartPackages: chartPackages,\n      chartVersion: chartVersion,\n      mapsApiKey: mapsApiKey,\n      onLoad: this.onLoad,\n      onError: this.onError\n    }));\n  }\n  componentDidMount() {\n    this._isMounted = true;\n  }\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n  isFullyLoaded(google) {\n    const {\n      controls,\n      toolbarItems,\n      getChartEditor\n    } = this.props;\n    return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n  }\n  constructor(...args) {\n    super(...args);\n    this._isMounted = false;\n    this.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n    this.onLoad = google1 => {\n      if (this.props.onLoad) {\n        this.props.onLoad(google1);\n      }\n      if (this.isFullyLoaded(google1)) {\n        this.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        const id = setInterval(() => {\n          const google = window.google;\n          if (this._isMounted) {\n            if (google && this.isFullyLoaded(google)) {\n              clearInterval(id);\n              this.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n    this.onSuccess = google => {\n      this.setState({\n        loadingStatus: \"ready\",\n        google\n      });\n    };\n    this.onError = () => {\n      this.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n  }\n}\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"sources":["../src/hooks/useLoadScript.ts","../src/hooks/useLoadGoogleCharts.ts","../src/default-props.ts","../src/generate-unique-id.ts","../src/constants.ts","../src/load-data-table-from-spreadsheet.ts","../src/Context.tsx","../src/components/GoogleChartDataTable.tsx","../src/components/GoogleChartEvents.tsx","../src/components/GoogleChart.tsx","../src/ReactGoogleCharts.tsx","../src/types.ts","../src/index.tsx"],"names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","React","createContext","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","Component","state","hiddenColumns","listenToLegendToggle","googleChartWrapper","props","events","addListener","chart","getChart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","onResize","componentDidMount","componentWillUnmount","removeAllListeners","componentDidUpdate","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","constructor","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","createRef","toolbar_ref","getGraphID","graph_id","instanceGraphID","getControlID","index","controlID","addControls","controls","control","controlIDMaybe","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","chartControl","controlEvents","removeListener","controlWrapper","toolbarItems","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","ChartEditor","chartEditor","setControlType","nextProps","nextState","renderChart","width","height","style","className","divStyle","div","Fragment","renderControl","key","getContainerId","renderToolBar","ref","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","defaultProps","loader","errorElement","isFullyLoaded","onSuccess","setInterval","clearInterval","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  propsFromContext: ReactGoogleChartProps | null;\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n\n  componentDidMount() {\n    const { google, googleChartWrapper } = this.props;\n\n    this.listenToEvents({\n      chartEvents: this.propsFromContext?.chartEvents || null,\n      google,\n      googleChartWrapper,\n    });\n  }\n\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.propsFromContext = propsFromContext;\n          return null;\n        }}\n      />\n    );\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.propsFromContext = null;\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}